# Импорт необходимых библиотек
import curses  # Библиотека для создания текстового интерфейса в терминале
import math    # Библиотека для математических операций
import re      # Библиотека для работы с регулярными выражениями

def draw_calculator_frame(framework, current_input, result):
    """
    Функция отрисовки графического интерфейса калькулятора
    
    Параметры:
    - framework: объект окна curses
    - current_input: текущий введенный пользователем текст
    - result: результат вычисления
    """
    # Получаем полные размеры экрана терминала
    height, width = framework.getmaxyx()
    
    # Расчет позиции для центрирования калькулятора
    calc_width = 60  # Фиксированная ширина калькулятора
    start_x = (width - calc_width) // 2  # Центрирование по горизонтали
    start_y = (height - 20) // 2  # Центрирование по вертикали

    # Очистка экрана перед новой отрисовкой
    framework.clear()

    # Определение графической структуры калькулятора с использованием символов Unicode
    frame = [
        # Верхняя часть рамки с заголовком
        "╔═══════════════════════════════════════════════════╗",
        "║                   КАЛЬКУЛЯТОР                     ║",
        "╠═══════════════════════════════════════════════════╣",
        "║                                                   ║",
        "╠═══════════════════════════════════════════════════╣",
        
        # Кнопки калькулятора
        "║   7    │    8    │    9    │    /    │    CE      ║",
        "║--------+---------+---------+---------+------------║",
        "║   4    │    5    │    6    │    *    │    √       ║",
        "║--------+---------+---------+---------+------------║",
        "║   1    │    2    │    3    │    -    │    %       ║",
        "║--------+---------+---------+---------+------------║",
        "║   0    │    .    │    +    │ Backspace            ║"
    ]

    # Добавление нижней части рамки с инструкциями
    frame.append("╠═══════════════════════════════════════════════════╣")
    frame.append("║ Backspace - удаляет символ | CE - удаляет число   ║")
    frame.append("║ C - полная очистка | = появится при вводе         ║")
    frame.append("╚═══════════════════════════════════════════════════╝")

    # Отрисовка каждой линии рамки на экране
    for idx, line in enumerate(frame):
        framework.addstr(start_y + idx, start_x, line)

    # Вывод текущего ввода пользователя
    framework.addstr(start_y + 3, start_x + 2, f"Ввод: {current_input}")
    
    # Вывод результата вычисления
    if result:
        framework.addstr(start_y + 3, start_x + 35, f"Результат: {result}")

    # Обновление экрана для отображения изменений
    framework.refresh()

def calculator(special_keys):
    """
    Основная функция логики калькулятора
    
    Параметры:
    - special_keys: объект окна curses для обработки клавиш
    """
    # Инициализация цветов и настроек curses
    curses.start_color()  # Подготовка к использованию цветов
    curses.curs_set(0)    # Скрытие курсора
    
    # Инициализация переменных состояния калькулятора
    current_input = ""  # Текущий вводимый текст
    result = ""         # Результат вычисления
    
    # Основной цикл обработки событий
    while True:
        # Отрисовка интерфейса калькулятора
        draw_calculator_frame(special_keys, current_input, result)
        
        # Получение нажатой клавиши
        key = special_keys.getch()
        
        # Обработка различных сценариев нажатия клавиш
        
        # Выход из программы
        if key == ord('q'):
            break
        
        # Ввод цифр и точки
        elif key in [ord('0'), ord('1'), ord('2'), ord('3'), ord('4'), 
                    ord('5'), ord('6'), ord('7'), ord('8'), ord('9'), ord('.')]:
            # Если есть предыдущий результат, начинаем новый ввод
            if result:
                current_input = chr(key)
                result = ""
            else:
                current_input += chr(key)
        
        # Ввод математических операторов
        elif key in [ord('+'), ord('-'), ord('*'), ord('/')]:
            # Если есть предыдущий результат, используем его как начало нового выражения
            if result:
                current_input = result + chr(key)
                result = ""
            else:
                current_input += chr(key)
        
        # Полная очистка (клавиша C)
        elif key == ord('c') or key == ord('C'):
            current_input = ""
            result = ""
        
        # Очистка последнего элемента (CE)
        elif key == ord('e') or key == ord('E'):
            current_input = remove_last_number_or_operator(current_input)
        
        # Удаление последнего символа (Backspace)
        elif key == 263 or key == 127:
            current_input = current_input[:-1]
        
        # Вычисление результата
        elif key == ord('=') or key == 10:
            try:
                result = str(eval(current_input))
                current_input = ""  # Очистка ввода после получения результата
            except Exception:
                result = "Ошибка"
        
        # Вычисление процента
        elif key == ord('%'):
            try:
                result = str(eval(f"{current_input}/100"))
                current_input = ""  # Очистка ввода после получения результата
            except Exception:
                result = "Ошибка"
        
        # Вычисление квадратного корня
        elif key == ord('r') or key == ord('R'):
            try:
                result = str(math.sqrt(float(current_input)))
                current_input = ""  # Очистка ввода после получения результата
            except:
                result = "Ошибка"

def remove_last_number_or_operator(expression):
    """
    Удаляет последнее число или оператор из выражения
    
    Параметры:
    - expression: текущее математическое выражение
    
    Возвращает:
    - Выражение без последнего числа или оператора
    """
    # Разбиваем выражение на части с помощью регулярного выражения
    parts = re.findall(r'[\d.]+|[+\-*/]', expression)
    
    # Если есть элементы, удаляем последний
    if parts:
        return expression[:-len(parts[-1])]
    
    return expression

def is_valid_expression(expression):
    """
    Проверяет, можно ли показать кнопку = 
    
    Параметры:
    - expression: текущее математическое выражение
    
    Возвращает:
    - True, если выражение содержит полное математическое действие
    """
    # Проверяем наличие полного выражения с двумя операндами
    match = re.match(r'^-?\d+(\.\d+)?[+\-*/]-?\d+(\.\d+)?$', expression)
    return bool(match)

def main():
    """
    Основная функция запуска калькулятора
    Использует обертку curses для корректной инициализации и закрытия
    """
    curses.wrapper(calculator)

# Проверка, что скрипт запускается напрямую
if __name__ == "__main__":
    main()
    
    
    
#     Основные улучшения и особенности кода:

# Функция remove_last_number_or_operator():

# Использует регулярное выражение для разбора выражения
# Позволяет удалять последнее число или оператор
# Работает с десятичными числами и отрицательными значениями
# Функция is_valid_expression():

# Проверяет корректность математического выражения
# Использует регулярное выражение для валидации
# Поддерживает числа с плавающей точкой и отрицательные числа
# Улучшенная логика ввода в функции calculator():

# Более гибкая обработка результатов
# Возможность продолжения вычислений с использованием предыдущего результата
# Очистка ввода после получения результата
# Рекомендации по использованию:

# Используйте клавиши 0-9 для ввода чисел
# Операторы +, -, *, / для математических действий
# 'C' для полной очистки
# 'CE' для удаления последнего числа или оператора
# Backspace для удаления последнего символа
# 'R' для извлечения квадратного корня
# '%' для вычисления процента
# Примеры использования:

# Insert Code
# Edit
# Copy code
# Ввод: 10+20  -> Результат: 30
# Ввод: 50*2   -> Результат: 100
# Ввод: 16 R   -> Результат: 4.0
# Ввод: 200%  -> Результат: 2.0